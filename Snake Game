


from turtle import Turtle
import time
from turtle import Screen
import random




STARTING_POSITIONS = [(0, 0), (-20, 0), (-40, 0)]
MOVE_DISTANCE=20


class Scoreboard(Turtle):
   def __init__(self):
       super().__init__()
       self.score=0
       self.color("white")
       self.penup()
       self.goto(0,270)
       self.hideturtle()
       self.update_scoreboard()
   def update_scoreboard(self):
       self.clear()
       self.write(f"score:{self.score} ", align="center", font=("Arial",24,"normal"))
   def increase_score(self):
       self.score+=1
       self.update_scoreboard()


class Food(Turtle):
   def __init__(self):
      super().__init__()
      self.shape("circle")
      self.penup()
      self.shapesize(stretch_len=0.5,stretch_wid=0.5)
      self.color("purple")
      self.speed("fastest")
      self.refresh()
   def refresh(self):
      random_x=random.randint(-290,290)
      random_y=random.randint(-290,290)
      self.goto(random_x,random_y)


class Snake:
   def __init__(self):
       self.segments = []
       self.create_snake()
       self.head=self.segments[0]


   def create_snake(self):
       for position in STARTING_POSITIONS:
           self.add_segment(position)
   def add_segment(self, position):
       new_segment = Turtle("square")
       new_segment.color("black")
       new_segment.penup()
       new_segment.goto(position)
       self.segments.append(new_segment)
   def extend(self):
       # Add a new segment to the snake
       self.add_segment(self.segments[-1].position())


   def move(self):
       # Her segmenti, bir önceki segmentin pozisyonuna taşıyoruz.
       for seg_num in range(len(self.segments) - 1, 0, -1):
           new_x = self.segments[seg_num - 1].xcor()
           new_y = self.segments[seg_num - 1].ycor()
           self.segments[seg_num].goto(new_x, new_y)
       self.head.forward(MOVE_DISTANCE)
       if self.head.xcor()>290:
           self.head.setx(-290)
       elif self.head.xcor()<-290:
           self.head.setx(290)
       elif self.head.ycor()>290:
           self.head.sety(-290)
       elif self.head.ycor()<-290:
           self.head.sety(290)
      
   def up(self):
       if self.head.heading() != 270:
           self.head.setheading(90)


   def down(self):
       if self.head.heading() != 90:
           self.head.setheading(270)


   def left(self):
       if self.head.heading() != 0: 
          self.head.setheading(180)
   def right(self):
     if self.head.heading() != 180:
           self.head.setheading(0)




# Ekran ayarlarını yapalım.
screen = Screen()
screen.setup(width=600, height=600)
screen.bgcolor("pink")
screen.title("My Snake Game")
screen.tracer(0)
snake=Snake()
food=Food()
scoreboard = Scoreboard()  # Ekran güncellemelerini manuel olarak yapabilmek için tracer'ı kapatıyoruz.


# Yılanı oluşturuyoruz.
screen.listen()
screen.onkey(snake.up,"Up")
screen.onkey(snake.down,"Down")
screen.onkey(snake.left,"Left")
screen.onkey(snake.right,"Right")








game_is_on = True
while game_is_on:
   screen.update()
   time.sleep(0.1)
   snake.move() 
  
  
   if snake.head.distance(food)<15:
       food.refresh()
       snake.extend()
       scoreboard.increase_score()


   if snake.head.xcor()>290 or snake.head.xcor()<-290 or snake.head.ycor()>290 or snake.head.ycor()<-290:
       game_is_on = False
       scoreboard.game_over()


   for segment in snake.segments[1:]:
       if snake.head.distance(segment)<10:
           game_is_on=False
           scoreboard.game_over()
screen.exitonclick()
